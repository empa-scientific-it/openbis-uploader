from abc import ABC, ABCMeta
from typing import Callable, Any, Dict, List, Literal, Type, TypeVar
import pybis
from pybis.pybis import PropertyType, Space, SampleType, ExperimentType
from pydantic.dataclasses import dataclass
from pydantic import BaseModel, Field
import pathlib as pl
from pydantic.typing import ForwardRef

def wrap_ob(fun: Callable) -> Callable:
    def run(*args, **kwargs) -> Any | None:
        try:
            return fun(*args, **kwargs)
        except ValueError:
            return None
    return run

class OpenbisGenericObject(ABC, BaseModel):
    def create(self, ob: pybis.Openbis, parent: Type['OpenbisGenericObject'] | None) -> None:
        pass

class OpenbisSample(OpenbisGenericObject):
    type: str
    properties: Dict| None = None
    def create(self, ob: pybis.Openbis, space: Type['OpenbisSpace'], project: Type['OpenbisProject'] | None = None, collection: Type['OpenbisCollection'] | None = None):
        project_path = f"/{space.code}/{project.code}/"
        sample_path = f"/{space.code}/{project.code}/{collection.code}"
        sm = ob.new_sample(type = self.type, space = space.code, collection=sample_path, props = self.properties)
        try:
            breakpoint()
            sm.save()
        except:
            pass

class OpenbisCollection(OpenbisGenericObject):
    code: str
    type: str
    samples: List[OpenbisSample] | None = None
    def create(self, ob: pybis.Openbis, space: 'OpenbisSpace', project: 'OpenbisProject'):
        col = ob.new_collection(self.type, code=self.code, project=project.code)
        try:
            col.save()
        except ValueError as e:
            col = ob.get_collection(f"/{space.code}/{project.code}/{self.code}")
        if self.samples:
            for s in self.samples:
                sp = s.create(ob, space, project, self)
                try:
                    sp.save()
                except:
                    pass

class OpenbisProject(OpenbisGenericObject):
    code: str
    description: str | None = None
    collections: List[OpenbisCollection] | None = None
    def create(self, ob: pybis.Openbis, parent: 'OpenbisSpace'):
        pr = ob.new_project(parent.code, self.code, description=self.description)
        try:
            pr.save()
        except:
            pass
        for c in self.collections:
            c.create(ob, parent, self)

class OpenbisSpace(OpenbisGenericObject):
    code: str
    projects: List[OpenbisProject] | None = None
    def create(self, ob: pybis.Openbis):
        #Create space
        sp = ob.new_space(code=self.code)
        try:
            sp.save()
        except:
            pass
        #Create projects
        for p in self.projects:
            p.create(ob, sp)

class OpenbisProperty(OpenbisGenericObject):
    code: str 
    label: str
    description: str = Field(..., min_length=1)
    data_type: Literal["INTEGER", "VARCHAR", "MULTILINE_VARCHAR", "REAL", "TIMESTAMP", "BOOLEAN", "HYPERLINK", "XML", "CONTROLLEDVOCABULARY", "MATERIAL"]

    def create(self, ob: pybis.Openbis):
        pt = ob.new_property_type(self.code, self.label, self.description, self.data_type)
        try:
            pt.save()
        except:
            pass


class OpenbisObjectType(OpenbisGenericObject):
    code: str
    prefix: str
    properties: Dict[str, List[str]] | None = {}
    extras: Dict[str, str] | None = None
    autogenerate_code: bool = True
    def create(self, ob: pybis.Openbis):
        ot:SampleType = ob.new_object_type(code = self.code, generatedCodePrefix = self.prefix, autoGeneratedCode=self.autogenerate_code)
        try:
            ot.save()
        except:
            ot = ob.get_sample_types(self.code)
        try:
            for section, props in self.properties.items():
                for prop in props:
                    ot.assign_property(prop, section=section)
                    ot.save()
        except:
            pass

class OpenbisCollectionType(OpenbisGenericObject):
    code: str
    description: str
    properties: List[str] | None = {}
    def create(self, ob: pybis.Openbis):
        ot:ExperimentType = ob.new_collection_type(code = self.code, description= self.description)
        try:  
            ot.save()
            for prop in self.properties:
                    ot.assign_property(prop)
                    ot.save()
        except:
            pass

class OpenbisInstance(OpenbisGenericObject):
    spaces: List[OpenbisSpace] | None = None 
    object_types: List[OpenbisObjectType] | None = None
    collection_types: List[OpenbisCollectionType] | None = None
    properties: List[OpenbisProperty] | None = None

    def create(self, ob: pybis.Openbis):
        for prop in self.properties:
            prop.create(ob)
        for ot in self.object_types:
            ot.create(ob)
        for ot in self.collection_types:
            ot.create(ob)
        for sp in self.spaces:
            sp.create(ob)


def create_instance(ob: pybis.Openbis, config: pl.Path) -> None:
    oi = OpenbisInstance.parse_file(config)
    oi.create(ob)




#Login
ob = pybis.Openbis("localhost:8443",    verify_certificates=False, use_cache=False)
ob.login("admin", "changeit")

create_instance(ob, pl.Path(__file__).parent / pl.Path("./test_instance.json"))
